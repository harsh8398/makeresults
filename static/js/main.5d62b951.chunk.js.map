{"version":3,"sources":["components/Demo.jsx","utils/utils.js","components/JSONInput.jsx","components/MakeResults.jsx","App.js","reportWebVitals.js","index.js"],"names":["Demo","handleModalClose","open","useState","activeStepId","setActiveStepId","handlePrevious","useCallback","handleNext","imageURIs","process","onRequestClose","Header","level","Body","style","width","display","justifyContent","Step","textAlign","alt","src","margin","Footer","icon","label","appearance","disabled","onClick","numSteps","tokenEpoch","Date","getTime","MAP_TYPE_TOKENS","number","boolean","blacklist","inflateTemplate","res","varCounters","booleanTemplate","count","output","i","JSONInput","setSearch","converted","setConverted","value","setValue","json","setJson","error","setError","handleClick","func","timer","timeout","args","clearTimeout","setTimeout","apply","debounce","data","tokenize","length","JSON","parse","key","includes","e","tempString","stringify","slice","replace","RegExp","_","convertToMakeResults","obj","ReactGA","event","category","action","screenReaderText","expandChildren","startAdornment","alignItems","padding","size","multiline","placeholder","onChange","spellCheck","MakeResults","search","initialize","trackingId","gtagOptions","anonymize_ip","send","hitType","page","window","location","pathname","App","modalToggle","useRef","setOpen","useEffect","localStorage","getItem","setItem","family","density","colorScheme","className","gutter","Row","Column","span","inline","ref","to","current","focus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d62b951.chunk.js","sourcesContent":["import React, { useCallback, useState } from \"react\";\nimport Button from \"@splunk/react-ui/Button\";\nimport ChevronLeft from \"@splunk/react-icons/ChevronLeft\";\nimport ChevronRight from \"@splunk/react-icons/ChevronRight\";\nimport StepBar from \"@splunk/react-ui/StepBar\";\nimport Heading from \"@splunk/react-ui/Heading\";\nimport Modal from \"@splunk/react-ui/Modal\";\n\nconst numSteps = 3;\n\nfunction Demo({ handleModalClose, open }) {\n  const [activeStepId, setActiveStepId] = useState(0);\n\n  const handlePrevious = useCallback(() => {\n    setActiveStepId(activeStepId - 1);\n  }, [activeStepId]);\n\n  const handleNext = useCallback(() => {\n    setActiveStepId(activeStepId + 1);\n  }, [activeStepId]);\n\n  const imageURIs = [\n    `${process.env.PUBLIC_URL}/images/step1.png`,\n    `${process.env.PUBLIC_URL}/images/step2.png`,\n    `${process.env.PUBLIC_URL}/images/step3.png`,\n  ];\n  const helpTexts = [\n    \"You provide raw JSON event as input.\",\n    \"Input JSON event is tokenized to prevent skewing.\",\n    \"Finally, ready to run Splunk makeresults command is provided for copy.\",\n  ];\n\n  return (\n    <div>\n      <Modal onRequestClose={handleModalClose} open={open}>\n        <Modal.Header>\n          <Heading level={2}>How it works?</Heading>\n        </Modal.Header>\n        <Modal.Body style={{ width: \"800px\" }}>\n          <StepBar\n            activeStepId={activeStepId}\n            style={{ display: \"flex\", justifyContent: \"center\" }}\n          >\n            <StepBar.Step>Paste JSON</StepBar.Step>\n            <StepBar.Step>Tokenize JSON</StepBar.Step>\n            <StepBar.Step>Generate events!</StepBar.Step>\n          </StepBar>\n          <Heading level={3} style={{ textAlign: \"center\" }}>\n            {`${activeStepId + 1}. `}\n            {helpTexts[activeStepId]}\n          </Heading>\n          <br />\n          <img\n            alt=\"\"\n            src={imageURIs[activeStepId]}\n            style={{\n              display: \"block\",\n              margin: \"0 auto\",\n            }}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button\n            icon={<ChevronLeft />}\n            label=\"Back\"\n            appearance=\"default\"\n            disabled={activeStepId === 0}\n            onClick={handlePrevious}\n          />\n\n          <Button\n            label={activeStepId < numSteps - 1 ? \"Next\" : \"Done\"}\n            appearance=\"primary\"\n            onClick={\n              activeStepId < numSteps - 1\n                ? handleNext\n                : () => {\n                    setActiveStepId(0);\n                    handleModalClose();\n                  }\n            }\n          >\n            <ChevronRight />\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Demo;\n","const tokenEpoch = new Date().getTime();\n\nconst MAP_TYPE_TOKENS = {\n  number: `##number${tokenEpoch}##`,\n  // string: `##string${tokenEpoch}##`,\n  boolean: `##boolean${tokenEpoch}##`,\n  // bigint: `##bigint${tokenEpoch}##`,\n  // undefined: `##undefined${tokenEpoch}##`,\n  // object: undefined, // uncludes null, [], {}, etc.\n};\n\n// const generateVar = (type, count) => `##${MAP_TYPE_TOKENS[type]}${count}##`;\n\nconst blacklist = [\"object\", \"undefined\", \"bigint\", \"string\"];\n\n// const effectiveTokens = {};\n\nexport const convertToMakeResults = (data, tokenize) => {\n  const varCounters = {\n    number: 0,\n    boolean: 0,\n  };\n\n  if (data.length === 0) {\n    return [-1, null];\n  }\n  let json = {};\n  if (tokenize) {\n    try {\n      json = JSON.parse(data, (key, value) => {\n        if (blacklist.includes(typeof value)) {\n          return value;\n        } else {\n          value = MAP_TYPE_TOKENS[typeof value];\n          return value;\n        }\n      });\n    } catch (e) {\n      return [-1, json];\n    }\n    let tempString = { data: JSON.stringify(json) };\n    let res = JSON.stringify(tempString)\n      .slice(9, -2)\n      .replace(\n        new RegExp(`\\\\\\\\\"${MAP_TYPE_TOKENS[\"number\"]}\\\\\\\\\"`, \"g\"),\n        function (_) {\n          varCounters[\"number\"] += 1;\n          return `\".num${varCounters[\"number\"]}.\"`;\n        }\n      )\n      .replace(\n        new RegExp(`\\\\\\\\\"${MAP_TYPE_TOKENS[\"boolean\"]}\\\\\\\\\"`, \"g\"),\n        function (_) {\n          varCounters[\"boolean\"] += 1;\n          return `\".boolean${varCounters[\"boolean\"]}.\"`;\n        }\n      );\n    return [inflateTemplate(res, varCounters), json];\n  } else {\n    try {\n      json = JSON.parse(data);\n    } catch (e) {\n      return [-1, json];\n    }\n\n    return [inflateTemplate(data), json];\n  }\n};\n\nfunction inflateTemplate(res, varCounters) {\n  const baseTemplate = \"| makeresults count=1\";\n  const numTemplate = (count) => `| eval num${count}=random()`;\n  const booleanTemplate = (count) =>\n    `| eval boolean${count}=if(random()%100 > 50, \"true\", \"false\") `;\n\n  let output = baseTemplate;\n  if (typeof varCounters !== \"undefined\") {\n    for (let i = 1; i <= varCounters[\"number\"]; i++) {\n      output += \"\\n\" + numTemplate(i);\n    }\n    for (let i = 1; i <= varCounters[\"boolean\"]; i++) {\n      output += \"\\n\" + booleanTemplate(i);\n    }\n  }\n  output += `\n| eval _raw=\"${res}\"\n| collect index=main`;\n  return output;\n}\n\nexport function debounce(func, timeout = 300) {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n}\n","import ArrowLeft from \"@splunk/react-icons/ArrowLeft\";\nimport Check from \"@splunk/react-icons/Check\";\nimport Code from \"@splunk/react-icons/Code\";\nimport Button from \"@splunk/react-ui/Button\";\nimport JSONTree from \"@splunk/react-ui/JSONTree\";\nimport Text from \"@splunk/react-ui/Text\";\nimport { useState } from \"react\";\nimport ReactGA from \"react-ga4\";\nimport { convertToMakeResults, debounce } from \"../utils/utils\";\n\nfunction JSONInput({ setSearch, converted, setConverted }) {\n    const [value, setValue] = useState(\"\");\n    const [json, setJson] = useState({});\n    const [error, setError] = useState(false);\n    let handleChange = (e, { value }) => {\n        setValue(value);\n    };\n    let handleClick = debounce(() => {\n        let [res, obj] = convertToMakeResults(value, true);\n        if (res === -1) {\n            setError(true);\n        } else {\n            setSearch(res);\n            setJson(obj);\n            setConverted(true);\n        }\n    });\n    if (error) {\n        ReactGA.event({\n            category: \"JSONParseError\",\n            action: \"Malformed JSON was provided.\",\n        });\n        // reset\n        return (\n            <>\n                <Button\n                    icon={<ArrowLeft screenReaderText={null} />}\n                    label=\"Try Again\"\n                    onClick={() => {\n                        setError(false);\n                        setValue(\"\");\n                        setSearch(\"\");\n                        setConverted(false);\n                    }}\n                />\n                <br />\n                <h1>Error! Please validate JSON input!</h1>\n            </>\n        );\n    }\n    return (\n        <>\n            {converted ? (\n                <>\n                    <Button\n                        icon={<ArrowLeft screenReaderText={null} />}\n                        label=\"Go Back\"\n                        onClick={() => setConverted(false)}\n                    />\n                    <br />\n                    <h1>Tokenized JSON</h1>\n                    <JSONTree json={json} expandChildren />\n                </>\n            ) : (\n                <>\n                    <h1>Paste any JSON event:</h1>\n                    <Text\n                        value={value}\n                        startAdornment={\n                            <div\n                                style={{\n                                    display: \"flex\",\n                                    alignItems: \"center\",\n                                    padding: \"0 8px\",\n                                }}\n                            >\n                                <Code size={1} />\n                            </div>\n                        }\n                        multiline\n                        placeholder=\"Paste any JSON event here...\"\n                        onChange={handleChange}\n                        spellCheck={false}\n                    />\n                    <br />\n                    <Button\n                        icon={<Check screenReaderText={null} />}\n                        label=\"makeresults!\"\n                        onClick={handleClick}\n                    />\n                </>\n            )}\n        </>\n    );\n}\n\nexport default JSONInput;\n","import Input from \"@splunk/react-search/components/Input\";\nimport ReactGA from \"react-ga4\";\n\nfunction MakeResults({ search }) {\n    ReactGA.event({\n        category: \"MakeResultsSuccess\",\n        action: \"Converted a JSON event to a event generating SPL command with makeresults\",\n    });\n    return (\n        <>\n            <h1>Corresponding Command:</h1>\n            <Input value={search} />\n        </>\n    );\n}\n\nexport default MakeResults;\n","import ColumnLayout from \"@splunk/react-ui/ColumnLayout\";\nimport Heading from \"@splunk/react-ui/Heading\";\nimport Link from \"@splunk/react-ui/Link\";\nimport SplunkThemeProvider from \"@splunk/themes/SplunkThemeProvider\";\nimport { useEffect, useRef, useState } from \"react\";\nimport ReactGA from \"react-ga4\";\nimport \"./App.css\";\nimport Demo from \"./components/Demo\";\nimport JSONInput from \"./components/JSONInput\";\nimport MakeResults from \"./components/MakeResults\";\n\nReactGA.initialize([\n    {\n        trackingId: \"G-1L32CR2CFR\",\n        gtagOptions: {\n            anonymize_ip: true,\n        },\n    },\n]);\n\nReactGA.send({\n    hitType: \"pageview\",\n    page: window.location.pathname + window.location.search,\n});\n\nfunction App() {\n    const [search, setSearch] = useState(\"# search will get generated here...\");\n    const [converted, setConverted] = useState(false);\n\n    const modalToggle = useRef(null);\n\n    const [open, setOpen] = useState(false);\n\n    const handleRequestOpen = () => {\n        ReactGA.event({\n            category: \"DemoClick\",\n            action: \"The demo modal will open.\",\n        });\n        setOpen(true);\n    };\n\n    const handleRequestClose = () => {\n        setOpen(false);\n        modalToggle?.current?.focus(); // Must return focus to the invoking element when the modal closes\n    };\n\n    useEffect(() => {\n        let firstDemoStatus = localStorage.getItem(\"firstDemoStatus\");\n        if (!firstDemoStatus) {\n            setOpen(true);\n            localStorage.setItem(\"firstDemoStatus\", true);\n        }\n    }, []);\n\n    return (\n        <SplunkThemeProvider\n            family=\"prisma\"\n            density=\"compact\"\n            colorScheme=\"dark\"\n        >\n            <div className=\"App\">\n                <div className=\"Header\">\n                    <Heading level={1}>&gt; makeresults</Heading>\n                </div>\n                <div className=\"Body\">\n                    <ColumnLayout gutter={8}>\n                        <ColumnLayout.Row>\n                            <ColumnLayout.Column span={12}>\n                                <JSONInput\n                                    setSearch={setSearch}\n                                    converted={converted}\n                                    setConverted={setConverted}\n                                />\n                            </ColumnLayout.Column>\n                        </ColumnLayout.Row>\n                        <ColumnLayout.Row>\n                            <ColumnLayout.Column span={12}>\n                                {converted && <MakeResults search={search} />}\n                            </ColumnLayout.Column>\n                        </ColumnLayout.Row>\n                    </ColumnLayout>\n                </div>\n                <div className=\"Footer\">\n                    <ColumnLayout gutter={8}>\n                        <ColumnLayout.Row>\n                            <ColumnLayout.Column span={6}>\n                                <Heading level={4} inline>\n                                    <Link\n                                        onClick={handleRequestOpen}\n                                        ref={modalToggle}\n                                    >\n                                        Demo\n                                    </Link>\n                                </Heading>\n                            </ColumnLayout.Column>\n                            <ColumnLayout.Column span={6}>\n                                <Heading\n                                    level={4}\n                                    style={{ textAlign: \"right\" }}\n                                >\n                                    <Link\n                                        to=\"https://github.com/harsh8398/makeresults/issues/new\"\n                                        onClick={() => {\n                                            ReactGA.event({\n                                                category: \"ReportIssueClick\",\n                                                action: \"User redirected to github report issue page.\",\n                                            });\n                                        }}\n                                    >\n                                        Report an Issue\n                                    </Link>\n                                    &nbsp;&nbsp;&nbsp;\n                                    <Link\n                                        to=\"https://github.com/harsh8398/makeresults\"\n                                        onClick={() => {\n                                            ReactGA.event({\n                                                category: \"SourceClick\",\n                                                action: \"The user will be redirected to the github repo.\",\n                                            });\n                                        }}\n                                    >\n                                        Source\n                                    </Link>\n                                </Heading>\n                            </ColumnLayout.Column>\n                        </ColumnLayout.Row>\n                    </ColumnLayout>\n                </div>\n            </div>\n            <Demo handleModalClose={handleRequestClose} open={open} />\n        </SplunkThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}